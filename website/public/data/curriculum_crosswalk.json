[
    {
        "title": "CMU CS Academy: Exploring Programming with Python",
        "description": "Exploring Programming with Python is a lighter version of our CS1 curriculum, some might call it a splash into the fundamentals of programming. It is designed to engage and excite future CS1 students. This curriculum is taught using text-based coding in Python. Exploring Programming with Python also revolves around graphics-based problem solving and has similar visually-engaging notes, checkpoints, exercises, and projects for students to complete.\n",
        "suggested_grades": "6th – 8th",
        "total_hours": 40,
        "price": "Free to use.",
        "platform": "Proprietary Platform",
        "programming_language": "[PP] Python",
        "device_compatibility": "Computers (Windows, MacOS, Linux), Chromebooks, iPads and Other Tablets (with External Keyboards and Trackboards/Mouse to Access All Features)",
        "auto_grading_availability": "Full",
        "course_lens": "This curriculum adopts a graphics-oriented lens to introduce programming concepts. All content and explorations are related to filling a canvas with objects using Python code with additional dependencies.",
        "CSTA_standards": "Provides alignment to CSTA CS Standards. Provides aliginment to CS standards for each available state.",
        "course_structure": "4 units with ~4 lessons each\n17 total lessons",
        "sequencing": "Must be taught in order",
        "sequencing_details": "1. Drawing with shapes (circles, rectangles, lines, labels, and properties) (6 Lessons)\n2. Animation basics (variables, moving a shape, functions) (5 Lessons)\n3. Animation with control structures (if statements) (6 Lessons)\n4. Game Design (groups, loops) (4 Lessons)",
        "lesson_structure": "Teaching Notes, Checkpoint Understanding Checks, Exercises, and Creative Tasks (more open-ended summative assignment)",
        "training_info": "Welcome Webinar Wednesdays (30 minutes weekly)\nCourse refresher sessions offered weekday evenings. Asynchronous PD modules available, weeklong workshop each Fall.",
        "funding_info": "Funded by companies and private donors (Amazon, remake learning, PAsmart)",
        "date_modified": "Created in 2019; actively updated",
        "spotlight": "Spotlight: Creative Tasks\nAt the conclusion of each unit, students complete a Creative Task, where they have a blank canvas to fill with a product of their choosing - a static scene, an interactive experience, a game, or anything else! Before completing the task, students complete a design and development guide, where they think through their product, it's constituent components and their purposes, and devise a strategy to bring their canvas to life. After completing the assignment, students work through a reflection worksheet, where they reflect on challenges and successes, future goals, and catalogue their code. \n\nWhat makes it great: Student choice is an important aspect of any curriculum, and it allows students to bring their experiences, backgrounds, and unique perspectives to the CS classroom. They also push students to consider the intention behind their code.",
        "expert_take": "CMU CS Academy's founders have been prominent figures in the field of CS Education for an extensive period of time. \"Exploring Programming with Python\" (CS0) aims to ignite interest in CS from an early age. It features a proprietary graphics package enabling students to create drawings from Day 1 using simple Python instructions. The curriculum introduces event-driven programming and loops for animation, while incorporating conditionals and random numbers to foster creativity in student projects over the four-unit course. A teacher discussion board facilitates communication, support, and resource-sharing among educators. The discussion board is well-monitored and responses are thoughtful. Student progression may vary based on prior experience and problem-solving abilities. The course prioritizes enjoyable and engaging learning experiences, with emphasis on coding and problem-solving rather than mere exercises.",
        "course_url": "https://academy.cs.cmu.edu/course-info#CS0",
        "image_url": "/images/courses/CMU_Logo.png",
        "summary_url": "/summaries/CMU_Summary.pdf"
    },
    {
        "title": "CodeHS: Computer Science Explorations 1",
        "description": "The Computer Science Explorations 1 course is an introductory course for early middle school students. Students learn about the syntax of two programming languages, computing concepts, and digital citizenship.",
        "suggested_grades": "6th",
        "total_hours": 50,
        "price": "Requires paid subscription (restricted free version available).",
        "platform": "Proprietary Platform",
        "programming_language": "[PP] JavaScript & Python",
        "device_compatibility": "Computers (Windows, MacOS, Linux), Chromebooks, iPads and Other Tablets",
        "auto_grading_availability": "Full",
        "course_lens": "Students are introduced to basic and intermediate programming concepts by programming visual stories using the syntax of two different languages. Students also explore digital citizenship and computing concepts in separate units.",
        "CSTA_standards": "Provides alignments to CSTA CS Standards, ISTE Standards, NGSS and Common Core.\nProvides alignment to CS standards for each available state.",
        "course_structure": "5 modules with 2-7 lessons each\n24 total lessons + 3 evaluations + 2 projects + 2 quizzes",
        "sequencing": "Only units 1, 2, 4 must be taught in order",
        "sequencing_details": "1. JavaScript programmin (syntax, debugging, if statements, sequencing) (5 Lessons)\n2. JavaScript programming, cont. (nested if statements, functions, control statements, colors) (3 Lessons)\n3. Computing concepts (history, software/hardware, ethics) (9 Lessons)\n4. Python programming (Python syntax, Karel) (5 Lessons)\n5. Digital citizenship (9 Lessons)",
        "lesson_structure": "Videos, Exercises, Challenges, Handouts",
        "training_info": "Online PD (some College Board endorsed), in-person workshops, Free virtual PD, paid certification exam prep courses",
        "funding_info": "Private company, founded 2012, funded through revenue.",
        "date_modified": "Created in 2021; actively updated",
        "spotlight": "Spotlight: Multiple Languages\nThis curriculum gives students the opportunity to learn multiple programming languages within the same course, which is a relatively unique approach to programming instruction. Educators must be careful to ensure that students understand the connections between each of the programming languages, as they should not be presented as isolated concepts.\n\nWhat makes it great: By understanding that programming languages are different means to an end, students will be able to abstract out key programming concepts like loops, control structures, and variables and learn not to get caught up in the weeds of syntax.",
        "expert_take": "CodeHS Computer Science Explorations 1 offers a thorough introduction to computer science, covering a broad spectrum of topics essential for beginners. The curriculum delves into fundamental programming concepts such as variables, loops, and conditionals and introduces nested structures very early in the course. The course transitions between JavaScript syntax in Units 1 and 2 to Python syntax in Unit 4, incorporating functions and parameters for a well-rounded but challenging programming experience. The course might pose challenges for teachers without prior programming experience, especially as the programming units progress swiftly. On the plus side, there are multiple videos and exercises to support student learning.  Units 3 and 5 focus on non-programming CS concepts such as history, ethics, digital citizenship. This addition enriches the learning journey, offering students a more holistic understanding of computer science. A drawback is that this curriculum requires a paid subscription, though a free version is available with restricted functionality.",
        "course_url": "https://codehs.com/course/csexplorations1/overview",
        "image_url": "/images/courses/CodeHS_Logo.png",
        "summary_url": "/summaries/CodeHS_Summary.pdf"
    },
    {
        "title": "Code.org: Computer Science Discoveries",
        "description": "Code.org's most flexible course, allowing each unit to be taught alone, combined into collections that focus on specific areas, or as a full year course. The free curriculum introduces students to building their own websites, apps, animations, games, and physical computing systems. The course is updated frequently and includes content and gamified activities that reflect teen trends.",
        "suggested_grades": "6th – 8th",
        "total_hours": "10 - 113",
        "price": "Free to use.",
        "platform": "Proprietary Platform",
        "programming_language": "[PP] Block-based, JavaScript",
        "device_compatibility": "Computers Running Windows, MacOS, Chromebooks, iPads with iPadOS 13.4 or Later with External Keyboard and Mouse/Touchpad, Microsoft Surface Pro with an external keyboard (Most Other Tablets NOT Supported)\nMicro:bit or circuit playgrounds recommended, but not required, for unit 6",
        "auto_grading_availability": "Partial",
        "course_lens": "Students are introduced to programming concepts through creative computing activities in a block-based environment and through web development. Through projects, discussions, and unplugged activities, students explore conceptual, social, and ethnical aspects of computing.",
        "CSTA_standards": "Provides alignment to K-12 CS Framework and the CSTA standards. ",
        "course_structure": "7 units with ~2 chapters each and ~10 lessons per chapter. Each lesson is divided further into steps.\n139 total lessons\n",
        "sequencing": "Unit selection/order can be customized",
        "sequencing_details": "1.Problem solving & computing (8 lessons)\n2. Web development (21 lessons)\n3. Interactivity & game design (28 lessons)\n4. The design process (21 lessons)\n5. Impacts of computing: Data and Society (16 lessons)\n6. App development \n     6A: (option A) Creating Apps with Devices-Circuit Playground (19 lessons)\n     6B: (option B) Creating Apps with Devices (micro:bit) (17 lessons)\n7. AI and Machine Learning (22 lessons)",
        "lesson_structure": "Videos, Activities, Quizzes, Slides",
        "training_info": "Offers PL workshops for new and experienced teachers throughout the year – require an application, offered through regional partners. Self-paced PD becoming available online.",
        "funding_info": "Code.org is a nonprofit funded by many large companies: Amazon, Google, Microsoft, Kenneth C. Griffin (3m+ each)",
        "date_modified": "Year of creation unavialable; updated annually",
        "spotlight": "Spotlight: Breadth & Depth\nCode.org is the most comprehensive curriculum listed in this tool, as it is budgeted to use the most instructional hours. As a powerhouse in this space, it offers tons of resources for a variety of CS programming, though we note that even though many materials are provided to educators, teachers still need planning time to make the lessons come to life.\n\nHonorable Mention: Modularity\nBeing as comprehensive as it is, the Code.org curricula are able to be adapted into different structures depending on a school's need. For instance, the CS Discoveries course may be broken up into a grades 6-8 sequence, or some individual units may be used for shorter class lengths.\n\nWhat makes it great: Flexibility! Code.org has resources, and you can use what they offer as a powerful foundation for any number of situations.",
        "expert_take": "Code.org Discoveries offers a comprehensive, well-organized, and student-centric approach to computer science education. Its flexible curriculum accommodates various class schedules, allowing teachers to tailor the course length to their needs. Covering a wide array of topics including Artificial Intelligence, Data, Web Design, Physical Computing, App Design, Games and Animations, Art and Design, and Programming, it ensures a holistic learning experience. One of the strengths of Discoveries is its inclusion of \"unplugged\" activities in all units, promoting hands-on and cooperative learning. Additionally, the curriculum provides detailed guidance for teachers, with a consistent progression through predict, skill building, practice, assessment, and challenges phases for programming via the Code Studio platform. Discoveries offers guidance on designing a flexible curriculum based on the teacher's preferred focus areas, such as Creativity, Hardware, Data, Design with Purpose, Coding, or Impact on Society. This adaptability makes it accessible and effective for teachers with minimal or no programming or computer science background. We also note that should educators choose to use Unit 6, the micro:bit simulator may be used in place of the physical device.",
        "course_url": "https://code.org/curriculum/csd",
        "image_url": "/images/courses/Code.org_Logo.png",
        "summary_url": "https://studio.code.org/courses/csd-2023?viewAs=Instructor"
    },
    {
        "title": "Harvard Graduate School of Education: Creative Computing Curriculum",
        "description": "The Creative Computing Curriculum is a collection of ideas, strategies, and activities for an introductory creative computing experience using the Scratch programming language. The activities are designed to support familiarity and increasing fluency with computational creativity and computational thinking. The changes made to this most recent edition of the curriculum include images of blocks and projects, and minor content revisions to reflect the new Scratch 3.0 website. This edition of the curriculum is now available in Google Slides as individual units, activities, or the full curriculum.\n",
        "suggested_grades": "3rd +",
        "total_hours": "< 30",
        "price": "Free to use.",
        "platform": "Scratch",
        "programming_language": "Scratch",
        "device_compatibility": "Computers (Windows, MacOS, Linux), or Chromebooks (Tablets and Mobile Devices NOT Recommended)",
        "auto_grading_availability": "None",
        "course_lens": "Students program a series of increasingly complex Scratch programs, which introduce them to various programming concepts as they complete each project.",
        "CSTA_standards": "Provides alignment to CSTA CS Standards, ISTE Standards, and Common Core.",
        "course_structure": "6 units with ~6 activities each\n44 total activities",
        "sequencing": "Must be taught in order",
        "sequencing_details": "0. Getting started (creativity, profiles, critiques) (6 lessons)\n1. Exploring Scratch (sequencing, basic blocks, remixing, iteration) (6 lessons)\n2. Animations (loops, events, parallelism, sequencing, animation, music) (6 lessons)\n3. Stories (remixing, iterating, debugging, reusing, events, collaboration) (6 lessons)\n4. Games (conditionals, operators, variables, lists) (6 lessons) (6 lessons)\n5. Diving deeper (advanced programming concepts) (6 lessons)\n6. Hackathon (self-directed projects) (8 lessons)",
        "lesson_structure": "Activity-based, Outline, Reflection Prompts, Step-by-step Cards, Assessment Questions, Extension Activities",
        "training_info": "Creative Computing Lab offers 6 week summer creative Computing Online Workshop ",
        "funding_info": "Funded by NSF in 2011 and 2013. ",
        "date_modified": "Created in 2011; updated in 2019",
        "spotlight": "Spotlight: Creativity\nThe Creative Computing curriculum sets creativity at the center of student learning. Students are able to complete projects that allow them to express themselves and create custom solutions to activities. \n\nWhat makes it great: Students are able to complete activities with open-ended solutions; in doing so, students can bring their own interests and backgrounds to the table in the CS classroom. ",
        "expert_take": "The Creative Computing Scratch curriculum is renowned for nurturing student creativity through its flexible approach, but it can be challenging for teachers without programming backgrounds due to its lack of structured guidance and its focus on open-ended activities and assignments. While Scratch is excellent for introducing coding, educators new to programming may find it daunting to navigate the curriculum efficiently. Notably, the curriculum incorporates numerous \"unplugged\" activities and concludes each unit with journal-based reflections, integrating writing into the learning process. The curriculum truly shines when instructors possess a basic understanding of coding or receive additional support. Those with teaching experience and some grasp of programming concepts are likely to feel more at ease with the Creative Computing curriculum and will be able to effectively leverage its capabilities with open-ended assignments.",
        "course_url": "https://creativecomputing.gse.harvard.edu/guide/curriculum.html",
        "image_url": "/images/courses/CreativeComputing_Logo.png",
        "summary_url": "/summaries/CreativeComputing_Summary.pdf"
    },
    {
        "title": "Google: CS First",
        "description": "CS First is an easy-to-use computer science curriculum designed for students in grades 4-8 (ages 9-14) that is free of charge. Teachers use the video content to teach students coding basics with Scratch for CS First, a special version of the Scratch coding editor inside the CS First website.\nNote that Google CS First also includes single-day lessons. Here, we are referencing the multi-day lessons.",
        "suggested_grades": "4th – 8th ",
        "total_hours": "< 60",
        "price": "Free to use.",
        "platform": "Scratch & Google Classroom (Optional)",
        "programming_language": "Scratch",
        "device_compatibility": "Computers (Windows, MacOS, Linux), or Chromebooks (Tablets and Mobile Devices NOT Recommended)",
        "auto_grading_availability": "None",
        "course_lens": "Students are introduced to programming concepts as they complete individual Scratch projects in 8-lesson units. Units each have a central theme, like storytelling, music, or sports.",
        "CSTA_standards": "Provides alignment to CSTA CS Standards and ISTE.",
        "course_structure": "1 welcome unit and 7 other units available.\nEach unit contains 8, 1-hour lessons. The curriculum offers 1 introductory unit, 2 beginner units, 3 intermediate units, and 2 advanced units. Units at the same level cover roughly the same concepts.",
        "sequencing": "Unit selection/order can be customized",
        "sequencing_details": "0. Welcome unit  (4 Lessons)\n1. Introductory unit (2 available)\n     Storytelling (sequencing, randomness, loops, modularity, conditionals, broadcasting) (8 Lessons)\n     Music & Sound (loops, conditionals, variables, procedures) (8 Lessons)\n2. Intermediate unit (3 available)\n     Friends (conditionals, loops, sequencing, procedures, variables, parallelism) (8 Lessons)\n     Fashion & Design (loops, events, conditionals, variables, objects, procedures, broadcasting) (8 Lessons)\n     Art (loops, events, variables, conditionals) (8 Lessons)\n3. Advanced unit (2 available)\n     Sports (events, conditionals, sensing, variables, loops, broadcasting) (8 Lessons)\n     Game Design (events, conditionals, booleans, randomness, variables, broadcasting) (8 Lessons)",
        "lesson_structure": "Starter Project, Example Projects, Brief Agenda Overview, Discussion Questions",
        "training_info": "Google outsources PD to 3 virtual and 4 in-person providers. Logistics are all handled differently at their discretion.",
        "funding_info": "Created and maintained by Google.",
        "date_modified": "Created in 2015; actively updated",
        "spotlight": "Spotlight: Differentiation\nThe Google CS First curriculum is intended for use in informal learning settings, though it can certainly be used in classroom settings. CS First offers multiple pathways at each level - for instance, the two introductory-level multi-day units cover similar topics through different lenses: storytelling and music. In a classroom setting, students could be allowed to choose which pathway to persue (either as a class vote or by chooisng a pathway for themselves)\n\nWhat makes it great: Offering students multiple pathways to learn concepts and demonstrate their understanding allows students to develop their unique strengths and preferences while fostering a deeper and more personalized learning experience.",
        "expert_take": "Google CS First Multi-day units offer detailed lesson plans and comprehensive scripts, making it an appropriate resource for novice teachers or those less confident in teaching programming. The curriculum caters to students have no programming background, and the curriculum provides a solid resource base. In each lesson, students are provided with video directions to follow as they complete the programming project. The video directions guide the student by displaying required code. With this approach, students could simply copy the code into their Scratch environment. There are several suggestions for workarounds if the classroom has a shortage of computers or earphones or has Internet connection issues. Pair-programming is encouraged throughout. The curriculum stands out for its accessibility and ease of use, enabling educators to deliver or provide engaging coding lessons effectively and provide a foundation for student learning. However, the programming concepts covered in each lesson are not always easily identified. This curriculum is best suited for those having little or no programming background.",
        "course_url": "https://csfirst.withgoogle.com/c/cs-first/en/curriculum.html",
        "image_url": "/images/courses/Google_Logo.png",
        "summary_url": "/summaries/CSFirst_Summary.pdf"
    },
    {
        "title": "Project STEM: Computer Science Explorations 1",
        "description": "Computer Science Explorations 1 is an introductory, classroom-based course appropriate for 6–8th+ grade students. It is designed with the new-to-CS student and teacher in mind and can be taught throughout a semester or over the course of a full academic year (1.5-2 hours per week of instruction per 9 week block).",
        "suggested_grades": "6th – 8th",
        "total_hours": "~ 65",
        "price": "Free to use.",
        "platform": "Proprietary Platform",
        "programming_language": "Scratch",
        "device_compatibility": "Computers (Windows, MacOS, Linux) and Chromebooks",
        "auto_grading_availability": "None",
        "course_lens": "Students program a series of increasingly complex Scratch programs, which introduce them to various programming concepts as they complete each project.",
        "CSTA_standards": "Provides alignment to CSTA CS Standards.",
        "course_structure": "4 Blocks\n2 Units per Block\n~10 Lessons per Unit",
        "sequencing": "Must be taught in order",
        "sequencing_details": "1. Motion (sequenced and parallel events, coordinate system) (15 Lessons)\n2. Animation and Games (loops and conditionals) (19 Lessons)\n3. Mazes, Games, and Storytelling (user input, variables, complex conditionals, random numbers, lists) (20 Lessons)\n4. Art and AI (procedures, Booleans, pen tool, ethical implications of AI)  (10 Lessons)",
        "lesson_structure": "Unknown (only course-level artifacts were available to review)",
        "training_info": "Requires a Project STEM account, each course has a 10-hour self-paced PD module online.",
        "funding_info": "Subsidized by Amazon Future Engineer. Requires school application for sponsorship.",
        "date_modified": "Created in 2021; actively updated",
        "spotlight": "Spotlight: Unit Recaps and Debugging\nThe final lesson in each unit is dedicated to a Unit Recap and Debugging. Although specific information about the lessons are not available, using debugging as a review tool is an excellent way to both enforce concepts and internalize the importance of debugging. By including programs for students to debug that each contain errors related to concepts covered in the present unit.",
        "expert_take": "Specifically designed with both novice computer science students and educators in mind, the course employs Scratch as a creative programming tool. Although Scratch is used, the curriculum encompasses the fundamental programming concepts applicable to any programming language. This approach ensures that students gain a robust foundation for future computer science courses. Throughout the course, students engage in problem-solving activities as they construct, remix and share animations, games, stories, music and art, in a collaborative environment. CSE1 is designed to be both engaging and relevant to student lives. The curriculum adopts a flexible approach to teaching and learning CS, featuring daily lesson plans comprised of inquiry-based activities, videos, assessments, and computing tools that support both hands-on instruction and immersive digital learning.",
        "course_url": "https://projectstem.org/middle-school-cs",
        "image_url": "/images/courses/ProjectStem_Logo.png",
        "summary_url": "/summaries/ProjectSTEM_Summary.pdf"
    },
    {
        "title": "Tynker: Programming 201",
        "description": "An introduction to programming for beginners in upper elementary grades. Introduce your class to programming using a fun scenario-based approach where they build two complete games. Side Scroller Survival introduces them to basics of motion and animation. In BeatBot Battle, they program a robot to make it dance. On completing these lessons, students will be able to build simple games, animations, and a variety of simple projects.",
        "suggested_grades": "5th – 6th ",
        "total_hours": "17 +",
        "price": "Requires paid subscription.",
        "platform": "Proprietary Platform",
        "programming_language": "[PP] Block-based (Scratch based)",
        "device_compatibility": "Computers (Windows, MacOS, Linux) and Chromebooks (NOT Supported on Tablets)",
        "auto_grading_availability": "Full",
        "course_lens": "This curriculum introduces students to intermediate programming concepts through animating scenes and creating interactive games.",
        "CSTA_standards": "Provides alignment to CSTA CS Standards, ISTE Standards and NGSS Standards. \n",
        "course_structure": "17 total lessons",
        "sequencing": "Must be taught in order",
        "sequencing_details": "1.\tIntroduction (basic commands and simple loops)\n2.\tLoops and Animations (More with loops)\n3.\tCreating a Scene: (multiple sprites) \n4.\tJumping over obstacles (conditional loops, variable updates)\n5.\tStorytelling (sprite interactions)\n6.\tUser Interaction (event driven programming and coordinate system)\n7.\tGuessing Game (user input, conditionals, conditional loops)\n8.\tRotation (sprite movement/rotation)\n9.\tAlien Invaders (sprite movement, random numbers)\n10.\tMusic and Animation (enhancements)\n11.\tInstruments and Tempo (enhancements)\n12.\tBroadcasting messages (more with event driven programming)\n13.\tTime limits (review and enhancements)\n14.\tMessage driven Programming: (review and enhancements)\n15.\tPop the Balloon: (review and enhancements)\n16.\tAnimation with Movement (work with variable updates)\n17.\tObstacle Course (more with conditionals)",
        "lesson_structure": "Vocabulary,Activities, Materials, Extension Activities, Multiple Choice Concept Review",
        "training_info": "Free weekly webinars available, recordings available online, teacher certifications, and teacher recognition program.",
        "funding_info": "Company founded in 2012, acquired by large corporation in 2021.",
        "date_modified": "Year of creation unavailable; actively updated",
        "spotlight": "Spotlight: Design & Interactivity\nFrom the beginning of the course, students are learning programming concepts through completing interactive artifacts like games or animated stories. This gives them high-quality products from their work to be proud of, opposed to simple programs they might create in other courses. However, students often work only with a piece of the puzzle and do not create every product they submit in its entirety.\n\nWhat makes it great: With introductory coding knowledge, it is difficult to create visually appealing and engaging products. By allowing students to program small pieces of larger programs, they are able to produce more flashy and interactive products from their work that they can be proud of and share with others.",
        "expert_take": "Tynker Programming 201 offers a visual coding tool and curriculum centered around the Scratch programming language. Students delve into programming activities that enhance vital skills such as logic, problem-solving, and critical thinking. The course adopts a scenario-based approach, guiding students through the creation of engaging games, which particularly benefits teachers with limited or no prior programming experience. The rich variety of resources caters to novice CS teachers, supporting their instructional needs effectively. Although it is block-based, drag-and-drop interface, the curriculum covers programming concepts fundamental to any language, ensuring a programming foundation for students. A notable feature is the inclusion of DIY projects, fostering \"interest-driven learning\" and enhancing student engagement. However, a significant drawback is the requirement for a paid subscription to access the full array of resources.",
        "course_url": "https://www.tynker.com/k8-school/coding-curriculum/programming-201/1-introduction?gad_source=1&gclid=Cj0KCQiAn-2tBhDVARIsAGmStVncFW9l6FAOl1faD0ouUiYtoye3QWCSVw9DpzTqUYJpn8hmari_DAEaAk1DEALw_wcB",
        "image_url": "/images/courses/Tynker_Logo.png",
        "summary_url": "/summaries/Tynker_Summary.pdf"
    },
    {
        "title": "Microsoft MakeCode: Introduction to CS",
        "description": "This twelve-unit course introduces coding and computer science by way of making and design, using the micro:bit microcontroller board, and Microsoft’s easy and powerful MakeCode block-based coding environment. The course is a project-based curriculum, with a maker philosophy at its core that provides a context for learning coding and computer science concepts through the act of making physical objects.",
        "suggested_grades": "6th - 8th",
        "total_hours": "~ 40",
        "price": "Free to use.",
        "platform": "Proprietary Platform",
        "programming_language": "Microsoft MakeCode, TypeScript",
        "device_compatibility": "Computers (Windows, MacOS, Linux) and Chromebooks, Tablets, Moblie Phones\nmicro:bits recommended, but not required",
        "auto_grading_availability": "None",
        "course_lens": "Students are introduced to programming concepts and introductory data structures through programming a physical computing device (or simulator) to perform a number of tasks or complete projects.",
        "CSTA_standards": "Provides alignment to CSTA standards.",
        "course_structure": "12 Units + 1 Final Project. 39 Total lessons, approx 3 per unit.",
        "sequencing": "Must be taught in order",
        "sequencing_details": "1. Making (3 Lessons)\n2. Algorithms (3 Lessons)\n3. Variables (3 Lessons)\n4. Conditionals (3 Lessons)\n5. Iteration (3 Lessons)\n6. Review/mini-project (3 Lessons)\n7. Coordinate grid system (3 Lessons)\n8. Booleans (3 Lessons)\n9. Bits, bytes, and binary (3 Lessons)\n10. Radio (3 Lessons)\n11. Arrays (3 Lessons)\n12. Accelerometer (3 Lessons)\n13. Independent final project (3 Lessons)",
        "lesson_structure": "Introductions, Unplugged Activities, micro:bit Activities, Student Project, Project Modifications, Assessments",
        "training_info": "Educators' edition of curriculum is available, and educator preparation videos are available online. No PD is offered by Microsoft.",
        "funding_info": "Maintained by Microsoft. Microsoft MakeCode was introduced in 2017.",
        "date_modified": "Created in 2017, last modified in 2020",
        "spotlight": "Spotlight: Physical Computing\nAlthough Microsoft is not the only provider of computer science curricula to accompany a physical device, it does offer a robust curriculum to support an affordable computing device (the micro:bit). Learning CS through phycial computing can be a powerful experience for students, as they are able to see physical representations of their code or projects. Sensors allow students to bring information from the world around them to their programming work. Teachers will need to facilitate learning to extrapolate key takeaways - it's not about learning how to use a micro:bit; rather,  the micro:bit is a tool to deepen student learning.\n\nWhat makes it great: Micro:bits (and other physical computing devices) allow students to connect the world around them with their CS learning, offering relevant and engaging experiences.",
        "expert_take": "This course is designed with the understanding that teachers may not have a background in Computer Science or may be teaching Computer Science for the first time. MakeCode Intro to CS provides simulated environments that allow students to test and debug their code without the need for physical hardware, which proves invaluable when access to such devices is restricted. Utilizing a block-based, drag-and-drop proprietary language interface, this curriculum minimizes the focus on syntax, making it a good option for students with little or no programming background. The curriculum covers fundamental programming concepts applicable to any language, providing students with a solid foundation for future CS courses. For teachers interested in integrating physical computing into their CS curriculum, MakeCode Intro to CS offers a seamless option that doesn't necessitate prior knowledge or experience in Computer Science. This course option also serves as an excellent bridge between coding and hardware.",
        "course_url": "https://makecode.microbit.org/courses/csintro",
        "image_url": "/images/courses/Microsoft_Logo.png",
        "summary_url": "/summaries/Microsoft_Summary.pdf"
    }
]
